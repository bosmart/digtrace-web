"""
Django settings for ResearchImpact project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
AUTH_USER_MODEL = 'user.CustomUser'
import datetime
from datetime import timedelta
from datetime import time
import os
from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# False if not in os.environ

if os.environ.get('DEBUG') == 'FALSE':
    DEBUG = False
else:
    DEBUG = True

# Raises django's ImproperlyConfigured exception if SECRET_KEY not in os.environ
SECRET_KEY = os.environ.get('SECRET_KEY')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'a0^g*c9^)$0gpq2%f%(m$%w6djqg)!-@3m6tglsgx45)u=7d6x'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

pl_viewer_url = os.environ.get('PLY_VIEWER_URL').split(':')[1].strip('//')

# ALLOWED_HOSTS = [pl_viewer_url, pl_viewer_url.lower(),os.environ.get('PLY_VIEWER_URL'),'127.0.0.1','furies:8082', 'localhost','10.8.210.4','furies','app1.astra.bluestar-software.co.uk','*.astra.bluestar-software.co.uk','app2.astra.bluestar-software.co.uk','http://bslwork12:8082','bslwork12:8082','10.0.75.1','localhost:4200',os.environ.get('PLY_VIEWER_URL')]
ALLOWED_HOSTS = [pl_viewer_url, pl_viewer_url.lower(), os.environ.get('PLY_VIEWER_URL'),
                 os.environ.get('PLY_VIEWER_URL').lower(), os.environ.get('PLY_VIEWER_URL_IP'), os.environ.get('CUSTOM_ALLOWED_HOST')]

CORS_ORIGIN_WHITELIST = (
    os.environ.get('PLY_VIEWER_URL').lower(),
    os.environ.get('PLY_VIEWER_URL'), os.environ.get('CUSTOM_ALLOWED_HOST')
)

# ALLOWED_HOSTS = ['*']

# Application definition
# JWT_AUTH = {
# 'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#     'ROTATE_REFRESH_TOKENS': False,
#     'BLACKLIST_AFTER_ROTATION': True,
#
#     'ALGORITHM': 'HS256',
#     'SIGNING_KEY': SECRET_KEY,
#     'VERIFYING_KEY': None,
#     'AUDIENCE': None,
#     'ISSUER': None,
#
#     'AUTH_HEADER_TYPES': ('Bearer',),
#     'USER_ID_FIELD': 'id',
#     'USER_ID_CLAIM': 'user_id',
#
#     'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
#     'TOKEN_TYPE_CLAIM': 'token_type',
#
#     'JTI_CLAIM': 'jti',
#
#     'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
#     'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
#     'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
# }

INSTALLED_APPS = [
    'content',
    'corsheaders',
    'rest_framework',
    'digtrace.apps.DigtraceConfig',
    'user.apps.UserConfig',
    'crispy_forms',
    'imagekit',
    'pysftp',
    'django_cleanup',
    'numpy',
    'PIL',
    'scipy',
    'pandas',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Access-Control-Allow-Origin',
    'Allow-Origin-With-Credentials',
    'responseType',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=3600),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',

}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ResearchImpact.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ResearchImpact.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
#
DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': int(os.environ.get('DB_PORT')),
    }
}
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/staticfiles/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

##commented out 03/10/19

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "staticfiles"),
#
# ]
#
#


MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')
MEDIA_URL = '/media/'
# FILE_UPLOAD_PERMISSIONS=0o640

AUTHENTICATION_BACKENDS = (
    'user.backend.CustomBackend',
)

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = 'digtrace-home'
LOGIN_URL = 'login'

WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': '',

        'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
    }
}

#
# CORS_ORIGIN_WHITELIST = [
#     'https://app1.astra.bluestar-software.co.uk',
#     'https://app2.astra.bluestar-software.co.uk',
#     'http://localhost:4200',
#     'https://localhost:8000',
#     'https://localhost:5000',
# 'http://10.0.75.1:8000',
# ]
# CORS_ORIGIN_REGEX_WHITELIST = [
#     'https://app1.astra.bluestar-software.co.uk',
#     'https://app2.astra.bluestar-software.co.uk',
#     'http://localhost:4200',
#     'https://localhost:8000',
#     'https://localhost:5000',
# 'http://10.0.75.1:8000',
# ]


####### akanda settings for digtrace #####

HOST1 = {
    "name": os.environ.get('HOST1_NAME'),
    "user_name": os.environ.get('HOST1_USER_NAME'),
    "password": os.environ.get('HOST1_PASSWORD'),
    "dir": os.environ.get('HOST1_DIR'),
    "max_instances_allowed": int(os.environ.get('HOST1_MAX_INSTANCES_ALLOWED')),
    "retry": int(os.environ.get('HOST1_RETRY')),
    "status": None,
    "python_interpreter": os.environ.get('HOST1_PYTHON_INTERPRETER'),
    "api_path": os.environ.get('HOST1_API_PATH'),
    "port": int(os.environ.get('HOST1_PORT'))

}
# "python_interpreter": '/usr/local/lib/python3.7',

HOSTS = [
    HOST1,
]

FILE_NAME_QUEUE = 'q.txt'
FILE_NAME_API_STATE = 'state.txt'
API_NAME = 'digtrace_api.py'
LOCAL_RUN = False
PLY_VIEWER_URL = os.environ.get('PLY_VIEWER_URL')

NUMBER_OF_RETRY_FOR_SENDING_FAILED_JOBS = int(os.environ.get('NUMBER_OF_RETRY_FOR_SENDING_FAILED_JOBS'))  # '501'
NUMBER_OF_RETRY_FOR_SENDING_FAILED_DUE_TO_FAILED_RECEIVER_JOBS = int(
    os.environ.get('NUMBER_OF_RETRY_FOR_SENDING_FAILED_DUE_TO_FAILED_RECEIVER_JOBS'))  # '502'
MAX_JOB_ASSIGNER_ALLOWER = int(os.environ.get('MAX_JOB_ASSIGNER_ALLOWER'))
MAX_JOB_PROCESSING_CHECKING_ALLOWED = int(os.environ.get('MAX_JOB_PROCESSING_CHECKING_ALLOWED'))
MAX_JOB__STATUS_RECIVER_ALLOWED = int(os.environ.get('MAX_JOB__STATUS_RECIVER_ALLOWED'))
MAX_JOB_FILE_RECIVER_ALLOWED = int(os.environ.get('MAX_JOB_FILE_RECIVER_ALLOWED'))

JOB_STATUS_CHECK_SLEEP = int(os.environ.get('JOB_STATUS_CHECK_SLEEP_SEC'))

# after the epoch period when the remote should be called to request deletion
DELETION_EVENT_TIME = time(hour=int(os.environ.get('DELETION_EVENT_TIME_HOUR')),
                           minute=int(os.environ.get('DELETION_EVENT_TIME_MINUTE')))

# waiting period for a remote job deletion since the most recent update (i.e. received ply files status 224)
DELETE_REMOTE_FILES_EXPIRY_PERIOD = timedelta(seconds=int(os.environ.get('DELETE_REMOTE_FILES_EXPIRY_PERIOD_SEC')))
